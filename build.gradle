buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        def kotlinVersion = file("generated/kotlin_version.txt").text
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.github.johnrengelman:shadow:8.1.1'
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "java"

group = project.group

def ENV = System.getenv()
def LIBRARY_VERSIONS_FILE = "generated/library_versions.json"
def KOTLIN_VERSION_FILE = "generated/kotlin_version.txt"

def kotlinLib = "org.jetbrains.kotlin:kotlin-stdlib"
def libraries = [
        kotlinLib,
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
        "org.jetbrains.kotlin:kotlin-stdlib-jdk7",
        "org.jetbrains.kotlin:kotlin-reflect",

        "org.jetbrains.kotlinx:kotlinx-coroutines-core",
        "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm",
        "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8",
        "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm",
        "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm",
        "org.jetbrains.kotlinx:kotlinx-serialization-cbor-jvm",
        "org.jetbrains.kotlinx:atomicfu-jvm",
        "org.jetbrains.kotlinx:kotlinx-datetime-jvm"
]

def libVersions = new JsonSlurper().parse(file(LIBRARY_VERSIONS_FILE))
def hasMissingLibVersion = !libVersions.keySet().containsAll(libraries)
def kotlinVersion = file(KOTLIN_VERSION_FILE).text

println("Kotlin: ${kotlinVersion}")
println("Libraries:")
libVersions.forEach { k, v ->
    println("\t${k}:${v}")
}

version = "kotlin.${kotlinVersion}" + (ENV.GITHUB_ACTIONS ? "" : ".local")

configurations {
    includeAndExpose

    include {
        extendsFrom includeAndExpose
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'PaperMC'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT"
    compileOnly "net.md-5:bungeecord-api:1.8-SNAPSHOT"
    compileOnly "com.velocitypowered:velocity-api:3.1.1"

    if (hasMissingLibVersion) {
        println("Contains missing library version, run updateLibraryVersions task!")
    } else {
        libraries.forEach {
            includeAndExpose("${it}:${libVersions[it]}")
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("bungee.yml") {
        expand "version": project.version
    }

    filesMatching("plugin.yml") {
        expand "version": project.version
    }

    filesMatching("velocity-plugin.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 8
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

task processMDTemplates(type: Copy) {
    group = "documentation"
    doFirst {
        if (hasMissingLibVersion) {
            throw new GradleException("Contains missing library version, run updateLibraryVersions task first!")
        }
    }

    from(file("templates"))
    include("**/*.template.md")
    filesMatching("**/*.template.md") {
        name = sourceName.replace("template.", "")
        def template = [
                PLUGIN_VERSION   : "kotlin.${kotlinVersion}"
        ]
        libraries.forEach {
            def key = it.split(":", 2)[1].replace("-", "_").toUpperCase(Locale.ROOT) + "_VERSION"
            template.put(key, libVersions[it])
        }
        expand(template)
    }
    destinationDir = rootDir
}

import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import org.gradle.util.VersionNumber

import java.nio.charset.StandardCharsets

task updateLibraryVersions {
    group = "update"
    doFirst {
        def output = [:]
        def slurper = new XmlSlurper()
        for (def lib : libraries) {
            def split = lib.split(":", 2)
            def group = split[0].replace(".", "/")
            def artifact = split[1]
            def xml = new URL("https://repo1.maven.org/maven2/${group}/${artifact}/maven-metadata.xml").text
            def metadata = slurper.parseText(xml)
            def versions = metadata.versioning.versions.version*.text()

            def latest = versions[0]
            def latestParsed = VersionNumber.parse(latest)
            for (def version : versions) {
                def parsed = VersionNumber.parse(version)
                if (parsed.qualifier == null && parsed > latestParsed) {
                    latestParsed = parsed
                    latest = version
                }
            }

            println("${lib} = ${latest}")
            output.put(lib, latest)

            if (lib == kotlinLib) {
                file(KOTLIN_VERSION_FILE).setText(latest, StandardCharsets.UTF_8.name())
            }
        }
        def json = new JsonBuilder(output)
        file(LIBRARY_VERSIONS_FILE).setText(json.toPrettyString(), StandardCharsets.UTF_8.name())
    }
}

task updateVersions {
    group = "update"
    dependsOn(updateLibraryVersions)
}

jar.dependsOn(shadowJar)